import { useState } from "react";
import { Sparkles, Plus, X, Info, ThumbsUp, ThumbsDown } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Badge } from "@/components/ui/badge";
import { Card, CardContent } from "@/components/ui/card";
import { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from "@/components/ui/tooltip";
import { FormLabel } from "@/components/ui/form";
import { useToast } from "@/hooks/use-toast";
import { Topic } from "./types";

interface TopicsManagementProps {
  meetingNotes: string;
  identifiedTopics: Topic[];
  setIdentifiedTopics: (topics: Topic[]) => void;
  topicsIdentified: boolean;
  setTopicsIdentified: (identified: boolean) => void;
}

const TopicsManagement = ({ 
  meetingNotes, 
  identifiedTopics, 
  setIdentifiedTopics, 
  topicsIdentified, 
  setTopicsIdentified 
}: TopicsManagementProps) => {
  const { toast } = useToast();
  const [isIdentifyingTopics, setIsIdentifyingTopics] = useState(false);
  const [showAddTopicInput, setShowAddTopicInput] = useState(false);
  const [newTopicName, setNewTopicName] = useState("");
  const [newTopicCategory, setNewTopicCategory] = useState("");

  const handleIdentifyTopics = async () => {
    if (!meetingNotes.trim()) {
      toast({
        title: "Error",
        description: "Please enter meeting notes before identifying topics.",
        variant: "destructive",
      });
      return;
    }

    setIsIdentifyingTopics(true);
    
    try {
      // Simulate AI processing with mock data based on the example
      await new Promise(resolve => setTimeout(resolve, 2000));
      
      const mockTopics: Topic[] = [
        { id: "1", name: "AAPL", category: "Companies" },
        { id: "2", name: "GOOG", category: "Companies" },
        { id: "3", name: "Technology", category: "Industries & Sectors" },
      ];
      
      setIdentifiedTopics(mockTopics);
      setTopicsIdentified(true);
      
      toast({
        title: "Topics Identified",
        description: "AI has successfully identified topics from your meeting notes.",
      });
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to identify topics. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsIdentifyingTopics(false);
    }
  };

  const removeTopic = (topicId: string) => {
    setIdentifiedTopics(identifiedTopics.filter(topic => topic.id !== topicId));
  };

  const handleAddManualTopic = () => {
    if (!newTopicName.trim() || !newTopicCategory.trim()) {
      toast({
        title: "Error",
        description: "Please enter both topic name and category.",
        variant: "destructive",
      });
      return;
    }

    const newTopic: Topic = {
      id: Date.now().toString(),
      name: newTopicName,
      category: newTopicCategory,
    };

    setIdentifiedTopics([...identifiedTopics, newTopic]);
    setNewTopicName("");
    setNewTopicCategory("");
    setShowAddTopicInput(false);
  };

  const groupedTopics = identifiedTopics.reduce((groups, topic) => {
    if (!groups[topic.category]) {
      groups[topic.category] = [];
    }
    groups[topic.category].push(topic);
    return groups;
  }, {} as Record<string, Topic[]>);

  const handleFeedback = (isPositive: boolean) => {
    toast({
      title: isPositive ? "Positive Feedback" : "Negative Feedback",
      description: isPositive 
        ? "Thank you for confirming the AI topics are accurate!" 
        : "Thank you for the feedback. We'll improve our topic identification.",
    });
  };

  return (
    <div>
      <div className="flex justify-end mb-3">
        <Button 
          type="button" 
          variant="outline" 
          size="sm" 
          className="flex items-center gap-2"
          onClick={handleIdentifyTopics}
          disabled={isIdentifyingTopics || !meetingNotes.trim()}
        >
          <Sparkles className="h-4 w-4" />
          {isIdentifyingTopics ? "Identifying..." : "Identify Topics"}
        </Button>
      </div>

      {/* AI Identified Topics Section */}
      {topicsIdentified && (
        <div className="space-y-3">
          <Card className="bg-gray-50">
            <CardContent className="p-4">
              <div className="flex items-center justify-between mb-4">
                <FormLabel className="text-base font-medium">Topics</FormLabel>
                <TooltipProvider>
                  <Tooltip>
                    <TooltipTrigger asChild>
                      <Badge variant="secondary" className="flex items-center gap-1 text-xs">
                        Generated by AI
                        <Info className="h-3 w-3" />
                      </Badge>
                    </TooltipTrigger>
                    <TooltipContent>
                      <p>These topics were identified via AI. Please verify for accuracy before submitting the interaction</p>
                    </TooltipContent>
                  </Tooltip>
                </TooltipProvider>
              </div>
              
              {Object.keys(groupedTopics).length > 0 ? (
                <div className="space-y-4">
                  {Object.entries(groupedTopics).map(([category, topics]) => (
                    <div key={category}>
                      <h4 className="font-medium text-sm text-gray-700 mb-2">{category}</h4>
                      <div className="flex flex-wrap gap-2">
                        {topics.map((topic) => (
                          <div key={topic.id} className="bg-white border border-gray-200 rounded-md px-3 py-1 flex items-center gap-2 text-sm">
                            <span>{topic.name}</span>
                            <button
                              type="button"
                              onClick={() => removeTopic(topic.id)}
                              className="text-gray-400 hover:text-gray-600"
                            >
                              <X className="h-3 w-3" />
                            </button>
                          </div>
                        ))}
                      </div>
                    </div>
                  ))}
                  
                  <div className="flex justify-end gap-2 pt-3">
                    <TooltipProvider>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <Button
                            type="button"
                            variant="ghost"
                            size="sm"
                            onClick={() => handleFeedback(true)}
                            className="p-2"
                          >
                            <ThumbsUp className="h-4 w-4" />
                          </Button>
                        </TooltipTrigger>
                        <TooltipContent>
                          <p>Topics are accurate</p>
                        </TooltipContent>
                      </Tooltip>
                    </TooltipProvider>
                    
                    <TooltipProvider>
                      <Tooltip>
                        <TooltipTrigger asChild>
                          <Button
                            type="button"
                            variant="ghost"
                            size="sm"
                            onClick={() => handleFeedback(false)}
                            className="p-2"
                          >
                            <ThumbsDown className="h-4 w-4" />
                          </Button>
                        </TooltipTrigger>
                        <TooltipContent>
                          <p>Topics need improvement</p>
                        </TooltipContent>
                      </Tooltip>
                    </TooltipProvider>
                  </div>
                </div>
              ) : (
                <p className="text-sm text-gray-500">No topics identified.</p>
              )}
            </CardContent>
          </Card>

          {/* Add Manual Topic Section */}
          {showAddTopicInput ? (
            <div className="space-y-3 p-3 bg-white rounded border">
              <div className="grid grid-cols-2 gap-2">
                <Input
                  placeholder="Topic name"
                  value={newTopicName}
                  onChange={(e) => setNewTopicName(e.target.value)}
                />
                <Input
                  placeholder="Category"
                  value={newTopicCategory}
                  onChange={(e) => setNewTopicCategory(e.target.value)}
                />
              </div>
              <div className="flex gap-2">
                <Button
                  type="button"
                  size="sm"
                  onClick={handleAddManualTopic}
                >
                  Add Topic
                </Button>
                <Button
                  type="button"
                  size="sm"
                  variant="outline"
                  onClick={() => {
                    setShowAddTopicInput(false);
                    setNewTopicName("");
                    setNewTopicCategory("");
                  }}
                >
                  Cancel
                </Button>
              </div>
            </div>
          ) : (
            <div className="flex justify-end">
              <Button
                type="button"
                variant="outline"
                size="sm"
                onClick={() => setShowAddTopicInput(true)}
                className="flex items-center gap-2"
              >
                <Plus className="h-4 w-4" />
                Add Manually
              </Button>
            </div>
          )}
        </div>
      )}
    </div>
  );
};

export default TopicsManagement;
